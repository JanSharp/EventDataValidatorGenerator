
[events]

[mapping]
<type_check> "field_name_to_check"
  <optional>;
  <single> "expected_type";
  <multiple>
    <type_name> "type_name_in_collection";
  ;
;
<player_index> "player_index_field_name"
  <optional>;
;
<surface_index> "surface_index_field_name"
  <optional>;
;
<localed_return_for_filters>;
<full_return_for_filters> "entity_field_name";

--[[
  if a field "player_index" is found
  it will automatically add that check
  same for "surface_index"
  (hardcoded)
]]



on_biter_base_built
<type_check> "entity"
  <single> "unit-spawner";
;

on_build_base_arrived
<type_check> "unit" <optional>;
  <single> "unit";
;

on_built_entity
<full_return_for_filters> "created_entity";

on_cancelled_deconstruction
<full_return_for_filters> "entity";

on_cancelled_upgrade
<full_return_for_filters> "entity";

on_character_corpse_expired
<type_check> "corpse"
  <single> "character-corpse";
;

on_chart_tag_modified
<player_index> "old_player_index" <optional>;;

on_combat_robot_expired
<type_check> "robot"
  <single> "combat-robot";
;

on_entity_cloned
<full_return_for_filters> "source";

on_entity_damaged
<full_return_for_filters> "entity";

on_entity_died
<full_return_for_filters> "entity";

--[[on_entity_renamed might be able to be type checked]]

on_entity_spawned
<type_check> "spawner"
  <single> "unit-spawner";
;
<type_check> "entity"
  <single> "unit";
;
--[[maybe the entity can also be something else?]]



--[[gui events]]

on_gui_checked_state_changed
<type_check> "element"
  <multiple>
    <type_name> "checkbox";
    <type_name> "radiobutton";
  ;
;

--[[on_gui_click... i think you can click literally everything]]

--[[on_gui_closed really should be validated, but i just can't in here]]
--[[maybe i'll hard code it - actually really simple]]
--[[just takes time]]

on_gui_confirmed
<type_check> "element"
  <single> "textfield";
;
--[[
<type_check> "element"
  <multiple>
    <type_name> "textfield";
  ;
;
maybe it is just text fields ...
]]

on_gui_elem_changed
<type_check> "element"
  <single> "choose-elem-button";
;

on_gui_location_changed
<type_check> "element"
  <single> "frame";
;

--[[same for on_gui_opened as for on_gui_closed]]

on_gui_selected_tab_changed
<type_check>
  <single> "tabbed-pane";
;

on_gui_selection_state_changed
<type_check> "element"
  <multiple>
    <type_name> "drop-down";
    <type_name> "list-box";
  ;
;

on_gui_switch_state_changed
<type_check> "element"
  <single> "switch";
;

on_gui_text_changed
<type_check> "element"
  <multiple>
    <type_name> "textfield";
    <type_name> "text-box";
  ;
;

on_gui_value_changed
<type_check> "element"
  <single> "slider";
;

--[[end gui events]]



on_land_mine_armed
<type_check> "mine"
  <single> "land-mine";
;

on_marked_for_deconstruction
<full_return_for_filters> "entity";

on_marked_for_upgrade
<full_return_for_filters> "entity";

on_market_item_purchased
<type_check> "market"
  <single> "market";
;

--[[on_mod_item_opened maybe validate item type]]

on_player_banned
<player_index> "by_player" <optional>;;

on_player_driving_changed_state
<type_check> "entity" <optional>;
  <single> "car";
;

on_player_dropped_item
<type_check> "entity"
  <single> "item-entity";
;
--[[add name check for "item-on-groun"?]]

--[[on_player_fast_transferred check if type can hold anything?]]

on_player_kicked
<player_index> "by_player" <optional>;;

on_player_respawned
<type_check> "player_port" <optional>;
  <single> "player-port";
;

--[[on_player_rotated_entity check if entity is rotatable?]]

on_player_unbanned
<player_index> "by_player" <optional>;;

on_post_entity_died
<full_return_for_filters> "prototype";

on_pre_ghost_deconstructed
<type_check> "ghost"
  <multiple>
    <type_name> "entity-ghost";
    <type_name> "tile_ghost";
  ;
;
<localed_return_for_filters>;

on_pre_player_mined_item
<full_return_for_filters> "entity";

on_pre_robot_exploded_cliff
<type_check> "robot"
  <single> "construction-robot";
;
<type_check> "cliff"
  <single> "cliff";
;
--[[type check for item being a cliff explosive]]

on_resource_depleted
<type_check> "entity"
  <single> "resource";
;

on_robot_built_entity
<type_check> "robot"
  <single> "construction-robot";
;
<full_return_for_filters> "created_entity";

on_robot_built_tile
<type_check> "robot"
  <single> "construction-robot";
;

on_robot_exploded_cliff
<type_check> "robot"
  <single> "construction-robot";
;
--[[type check for item being a cliff explosive]]

on_robot_mined
<type_check> "robot"
  <single> "construction-robot";
;

on_robot_mined_entity
<type_check> "robot"
  <single> "construction-robot";
;

on_robot_mined_tile
<type_check> "robot"
  <single> "construction-robot";
;

on_robot_pre_mined
<type_check> "robot"
  <single> "construction-robot";
;
<full_return_for_filters> "entity";

on_rocket_launch_ordered
<type_check> "rocket"
  <single> "rocket-silo-rocket";
;
<type_check> "rocket_silo"
  <single> "rocket-silo";
;

on_rocket_launched
<type_check> "rocket"
  <single> "rocket-silo-rocket";
;
<type_check> "rocket_silo"
  <single> "rocket-silo";
;

on_sector_scanned
<type_check> "radar"
  <single> "radar";
;
<localed_return_for_filters>;

on_unit_added_to_group
<type_check> "unit"
  <single> "unit";
;

on_unit_removed_from_group
<type_check> "unit"
  <single> "unit";
;

--[[
  new in 0.18.0
  on_unit_group_finished_gathering
  on_build_base_arrived
  on_script_trigger_effect
]]





--[[ ---------------------------------------------------------------------------------------------------- ]]
[concepts]

[mapping]
<basic_type_check> "type_name" "concept_display_name";
<has_fields>;
<field> "field_name" "field_type_name" "field_type_id"
  <required>;
  <optional>;
;
<tags>;
<localisedstring>;
<signalid>;



position
<basic_type_check> "table" "Position";
<has_fields>;
<field> "x" "double" "i__double" <required>;;
<field> "y" "double" "i__double" <required>;;

chunkposition
<basic_type_check> "table" "ChunkPosition";
<has_fields>;
<field> "x" "int" "i__int" <required>;;
<field> "y" "int" "i__int" <required>;;

tileposition
<basic_type_check> "table" "TilePosition";
<has_fields>;
<field> "x" "int" "i__int" <required>;;
<field> "y" "int" "i__int" <required>;;

boundingbox
<basic_type_check> "table" "BoundingBox";
<has_fields>;
<field> "left_top" "Position" "n__position" <required>;;
<field> "right_top" "Position" "n__position" <required>;;
<field> "orientation" "float" "i__float" <optional>;;
--[[todo: add more validation for orientation somehow]]

simpleitemstack
<basic_type_check> "table" "SimpleItemStack";
<has_fields>;
<field> "name" "string" "i__string" <required>;;
<field> "count" "uint" "i__uint" <optional>;;
<field> "health" "float" "i__float" <optional>;;
<field> "durability" "double" "i__double" <optional>;;
<field> "ammo" "double" "i__double" <optional>;;
<field> "tags" "array of string" "r__i__string" <optional>;;

oldtileandposition
<basic_type_check> "table" "OldTileAndPosition";
<has_fields>;
<field> "old_tile" "LuaTilePrototype" "a__luatileprototype" <required>;;
<field> "position" "TilePosition" "n__tileposition" <required>;;

tags
<basic_type_check> "table" "Tags";
<tags>;

displayresolution
<basic_type_check> "table" "DisplayResolution";
<has_fields>;
<field> "width" "uint" "i__uint" <required>;;
<field> "height" "uint" "i__uint" <required>;;

localisedstring
<localisedstring>;

signalid
<basic_type_check> "table" "SignalID";
<has_fields>;
<field> "name" "string" "i__string" <optional>;;
<field> "type" "string" "i__string" <required>;;
<signalid>;

on_script_path_request_finished_waypoint
<basic_type_check> "table" "WayPoint";
<has_fields>;
<field> "position" "Position" "n__position" <required>;;
<field> "needs_destroy_to_reach" "boolean" "i__boolean" <required>;;

script_raised_set_tiles_tile
<basic_type_check> "table" "Tile";
<has_fields>;
<field> "name" "string" "i__string" <required>;;
<field> "position" "Position" "n__position" <required>;;
